@page "/BackendUserListUpdate/{backend_user_id:int}"
@rendermode InteractiveWebAssembly
@using SignalRChat.Client.Service
@using SignalRChat.Client.Model
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@inject SignalRChat.Client.Service.BusinessService ObjectBusinessService
@inject SignalRChat.Client.Service.BackendUserService ObjectBackendUserService
<PageTitle>後台用戶修改</PageTitle>
<h3>後台用戶修改</h3>
<div class="filters">
    <label for="business_id">商家id</label>
    <input id="business_id"
    type="number"
    class="form-control"
    @bind="business_id" />
    <label for="backend_user_name">用戶名稱</label>
    <input id="backend_user_name"
    type="text"
    class="form-control"
    @bind="backend_user_name" />
    <label for="email">email</label>
    <input id="email"
    type="text"
    class="form-control"
    @bind="email" />
    <label for="phone_country">電話國碼</label><br />
    <select @bind="phone_country">
        @if (dataCountryCode != null)
        {
            @foreach (var dBT in dataCountryCode)
            {
                <option value="@GetContryCode(dBT)">@GetContryCode(dBT)</option>
            }
        }
    </select><br />
    <label for="phone">電話(第1個0不用輸入)</label>
    <input id="phone"
    type="text"
    class="form-control"
    @bind="phone" />
    <label for="password">密碼</label>
    <input id="password"
    type="password"
    class="form-control"
    @bind="password" />
    <label for="passwordAgain">密碼</label>
    <input id="passwordAgain"
    type="password"
    class="form-control"
    @bind="passwordAgain" />
    <Alert Color="AlertColor.Warning" Class="@isHide" Dismissable="true">@errorMessage </Alert>
    <button class="btn btn-outline-primary"
    @onclick="@UpdateBackendUserListAsync">
        修改
    </button>
    <button class="btn btn-outline-secondary"
    @onclick="@CancelUpdateBackendUserListAsync">
        取消
    </button>
</div>
@code {
    private int business_id = 0;
    private string backend_user_name = "";
    private string email = "";
    private string phone = "";
    private string phone_country = "";
    private string country_id = "";
    private string password = "";
    private string passwordAgain = "";
    private string errorMessage = "";
    private string isHide = "d-none";
    private UpdateBackendUserList? dataBackendUserList;
    private List<DataCountryCode>? dataCountryCode;
    [Parameter]
    public int backend_user_id { get; set; }
    public delegate void Callback();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await InitializeAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"錯誤: {ex.Message}");
            }
        }
    }
    private async Task InitializeAsync()
    {
        dataCountryCode = await ObjectBusinessService.GetCountryCode();
        dataBackendUserList = await ObjectBackendUserService.GetUpdateBackendUserList(backend_user_id);
        if (dataBackendUserList.code == "0" & dataBackendUserList.data != null)
        {
            business_id = dataBackendUserList.data.business_id;
            backend_user_name = dataBackendUserList.data.backend_user_name;
            email = dataBackendUserList.data.email;
            phone = dataBackendUserList.data.phone;
            phone_country = string.Format("{0}({1})", dataBackendUserList.data.country_id, dataBackendUserList.data.phone_country);
            country_id = dataBackendUserList.data.country_id;
            password = "";
            passwordAgain = "";
        }
        else
        {
            business_id = 0;
            backend_user_name = "";
            email = "";
            phone = "";
            phone_country = "";
            country_id = "";
            password = "";
            passwordAgain = "";
        }
        isHide = "d-none";
        StateHasChanged();
    }
    private async void UpdateBackendUserListAsync()
    {
        ResponseStanderd req = await ObjectBackendUserService.PutBackendUserList(backend_user_id, backend_user_name, email, password, business_id, phone, string.Format("{0}", phone_country.Substring(phone_country.IndexOf("(") + 1, phone_country.IndexOf(")") - phone_country.IndexOf("(") - 1)), phone_country.Substring(0, phone_country.IndexOf("(")), 0);
        errorMessage = req.message;
        isHide = "";
        StateHasChanged();
        await Task.Delay(6000);
        isHide = "d-none";
        StateHasChanged();
    }
    private string GetContryCode(DataCountryCode CC)
    {
        return string.Format("{0}({1})", CC.country_id, CC.phone_country);
    }
    private async void CancelUpdateBackendUserListAsync()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }
}
