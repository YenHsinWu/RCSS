@page "/BusinessListUpdate/{business_id:int}"
@rendermode InteractiveWebAssembly
@using SignalRChat.Client.Service
@using SignalRChat.Client.Model
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@inject SignalRChat.Client.Service.BusinessService ObjectBusinessService
<PageTitle>商家修改</PageTitle>
<h3>商家修改</h3>
<div class="filters">
    <label for="business_type_id">商家類型(id)</label>
    <select @bind="business_type_id">
        @if (dataBusinessType != null)
        {
            @foreach (var dBT in dataBusinessType.dataBusinessType)
            {
                <option value="@dBT.business_type_id">@dBT.business_type_name</option>
            }
        }
    </select><br/>
    <label for="business_name">商家名稱</label>
    <input id="business_name"
    type="text"
    class="form-control"
    @bind="business_name" />
    <label for="email">商家email</label>
    <input id="email"
    type="text"
    class="form-control"
    @bind="email" />
    <label for="address">商家地址</label>
    <input id="address"
    type="text"
    class="form-control"
    @bind="address" />
    <label for="phone">商家電話</label>
    <input id="phone"
    type="text"
    class="form-control"
    @bind="phone" />
    <label for="business_url">商家網址</label>
    <input id="business_url"
    type="text"
    class="form-control"
    @bind="business_url" />
    <Alert Color="AlertColor.Warning" Class="@isHide" Dismissable="true">@errorMessage </Alert>
    <button class="btn btn-outline-primary"
    @onclick="@UpdateBusinessListAsync">
        修改商家
    </button>
    <button class="btn btn-outline-secondary"
    @onclick="@CancelUpdateBusinessListAsync">
        取消修改
    </button>
</div>
@code {
    private int business_type_id = 0;
    private string business_name = "";
    private string email = "";
    private string phone = "";
    private string address = "";
    private string business_url = "";
    private string errorMessage = "";
    private string isHide = "d-none";
    private UpdateBusinessList? dataBusinessType;
    [Parameter]
    public int business_id { get; set; }
    public delegate void Callback();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await InitializeAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"錯誤: {ex.Message}");
            }
        }
    }
    private async Task InitializeAsync()
    {        
        dataBusinessType = await ObjectBusinessService.GetUpdateBusinessList(business_id);
        if (dataBusinessType.code == "0")
        {
            business_type_id = dataBusinessType.dataBusinessList.business_type;
            business_name = dataBusinessType.dataBusinessList.business_name;
            email = dataBusinessType.dataBusinessList.email;
            phone = dataBusinessType.dataBusinessList.phone;
            address = dataBusinessType.dataBusinessList.address;
            business_url = dataBusinessType.dataBusinessList.business_url;
            isHide = "d-none";
            StateHasChanged();
        }
        else
        {
            isHide = "";
            errorMessage = dataBusinessType.message;
        }
    }

    private async void UpdateBusinessListAsync()
    {
        ResponseStanderd req = await ObjectBusinessService.PutBusinessList(business_id,address, phone, email, business_name, business_type_id, 0, business_url);
        isHide = "";
        errorMessage = req.message;
        StateHasChanged();
        // SetTimeOut(5000, HideAlert);
    }

    // private async void SetTimeOut(int milliseconds, Callback HideAlert)
    // {
    //     await Task.Delay(milliseconds);
    //     HideAlert();
    // }
    // private async void HideAlert()
    // {
    //     isHide = "d-none";
    //     StateHasChanged();
    // }
    private async void CancelUpdateBusinessListAsync()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }
}
