@page "/BusinessServiceListCreate"
@rendermode InteractiveWebAssembly
@using SignalRChat.Client.Service
@using SignalRChat.Client.Model
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@* @inject SignalRChat.Client.Service.BusinessService ObjectBusinessService *@
@inject SignalRChat.Client.Service.BusinessServiceService ObjectBusinessServiceService
<PageTitle>商家客服聊天室新增</PageTitle>
<h3>商家客服聊天室新增</h3>
<div class="filters">
    <label for="business_id">商家id</label>
    <input id="business_id"
           type="text"
           class="form-control"
           @bind="business_id" />
    <label for="business_service_name">客服聊天室名稱</label>
    <input id="business_service_name"
           type="text"
           class="form-control"
           @bind="business_service_name" />    
    <Alert Color="AlertColor.Warning" Class="@isHide" Dismissable="true">@errorMessage </Alert>
    <button class="btn btn-outline-primary"
            @onclick="@AddBusinessServiceListAsync">
        新增
    </button>
    <button class="btn btn-outline-secondary"
            @onclick="@CancelBusinessServiceListAsync">
        取消
    </button>
</div>
@code {
    private int business_id = 0;
    private string business_service_name = "";
    private string errorMessage = "";
    private string isHide = "d-none";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await InitializeAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"錯誤: {ex.Message}");
            }
        }
    }
    private async Task InitializeAsync()
    {
        business_id = 0;
        business_service_name = "";
        isHide = "d-none";
        StateHasChanged();
    }

    private async void AddBusinessServiceListAsync()
    {
        ResponseStanderd req = await ObjectBusinessServiceService.PostBusinessServiceList(business_id, business_service_name, 0);
        errorMessage = req.message;
        isHide = "";
        StateHasChanged();
        await Task.Delay(6000);
        isHide = "d-none";
        StateHasChanged();
    }

    private async void CancelBusinessServiceListAsync()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }
}
