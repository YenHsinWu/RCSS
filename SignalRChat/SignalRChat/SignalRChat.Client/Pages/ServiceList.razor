@page "/servicelist"
@using SignalRChat.Client.Service
@rendermode InteractiveWebAssembly
@inject BusinessService businessService
@inject NavigationManager Navigator

<PageTitle>Service List</PageTitle>
<div>
    @if (!success)
    {
        <p>Loading...</p>
    }
    else if (chatRoomData != null && chatRoomData.Length > 0)
    {
        @foreach (var chatRoom in chatRoomData)
        {
            <button @onclick="() => NavigateToChatRoom(chatRoom.business_service_name, chatRoom.user_name, chatRoom.business_id.ToString())">@chatRoom.business_name -- @chatRoom.business_service_name [@chatRoom.user_name]: (Unread: @chatRoom.business_service_talks_is_not_read_count)</button> <br />
        }
    }
    else
    {
        <p>No data available.</p>
    }
</div>

@code {
    private BusinessService.BusinessServiceList chatRoomList;
    private BusinessService.BusinessServiceData[] chatRoomData;
    private bool success;
    private string errorMessage;

    private int count = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("First render: " + firstRender);
            try
            {
                await Initialize();
            }
            catch (Exception ex)
            {
                errorMessage = $"錯誤: {ex.Message}";
            }
        }
    }

    private async Task Initialize()
    {
        try
        {
            chatRoomList = await businessService.GetBusinessServiceChatRoomList(1);
            if (chatRoomList != null && chatRoomList.data != null)
            {
                chatRoomData = chatRoomList.data;
                Console.WriteLine("Success");
            }
            else
            {
                chatRoomData = new BusinessService.BusinessServiceData[0];
                Console.WriteLine("Failed");
            }

            success = true;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            errorMessage = $"错误: {ex.Message}";
            Console.WriteLine($"异常: {ex.Message}");
        }
    }

    private void NavigateToChatRoom(string serviceName, string uuid, string businessId)
    {
        string groupName = $"{serviceName}^{uuid}";
        Navigator.NavigateTo($"/chat?groupName={groupName}&userName={serviceName}&uuid={uuid}&businessId={businessId}");
    }
}