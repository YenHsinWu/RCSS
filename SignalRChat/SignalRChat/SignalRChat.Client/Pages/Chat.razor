@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client;
@using Microsoft.AspNetCore.WebUtilities;
@using SignalRChat.Client.Service
@rendermode InteractiveWebAssembly
@inject ChatService chatService
@inject NavigationManager Navigator

<PageTitle>Chat Room</PageTitle>

<input type="text" @bind="@message" placeholder="Message" />
<br />
<button @onclick="SendMessage">Send</button>
<br />

<ul>
    @foreach(var msg in @messages)
    {
        <li>@msg</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = [];
    private string? groupName;
    private string? userName;
    private string uuid;
    private string businessId;
    public string? message;

    private ChatService.RecentHistoryMessages[] recentHistoryMessagesData;
    private ChatService.RecentHistoryMessagesList recentHistoryMessagesList;
    private bool success;
    private string errorMessage;

    protected override void OnInitialized()
    {
        var uri = Navigator.Uri;
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(new Uri(uri).Query);
        if (queryParams.ContainsKey("groupName"))
        {
            groupName = queryParams["groupName"];
        }
        if (queryParams.ContainsKey("userName"))
        {
            userName = queryParams["userName"];    
        }
        if (queryParams.ContainsKey("uuid"))
        {
            uuid = queryParams["uuid"];
        }
        if (queryParams.ContainsKey("businessId"))
        {
            businessId = queryParams["businessId"];
        }
    }

    protected async override Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(Navigator.ToAbsoluteUri("/chathub")).Build();

        await ShowHistoryMessages();

        hubConnection.On<string, string, string, string>("SendGroupMsg", (groupName, userName, message, timestamp) =>
        {
            var concatMessage = $"[{groupName}] --- {userName}: {message} --- [{timestamp}]";
            messages.Add(concatMessage);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.StartAsync();
        Console.WriteLine(hubConnection.State);

        await hubConnection.SendAsync("JoinGroup", groupName, userName);
    }

    private async Task JoinGroup(string groupName, string userName)
    {
        await hubConnection.SendAsync("JoinGroup", groupName, userName);
    }

    private async Task SendMessage()
    {
        await hubConnection!.SendAsync("SendMessageToGroup", groupName, userName, message);
    }

    private async Task ShowHistoryMessages()
    {
        try
        {
            recentHistoryMessagesList = await chatService.GetRecentHistoryMessagesList(uuid, businessId, userName);
            if (recentHistoryMessagesList != null && recentHistoryMessagesList.data != null)
            {
                recentHistoryMessagesData = recentHistoryMessagesList.data;
            }
            else
            {
                recentHistoryMessagesData = new ChatService.RecentHistoryMessages[0];
            }

            foreach (var recentHistoryMessage in recentHistoryMessagesData)
            {
                if (recentHistoryMessage.is_user_talk)
                {
                    messages.Add($"[{groupName}] --- {uuid}: {recentHistoryMessage.talk_content} --- [{recentHistoryMessage.created_date.ToString("HH:mm:ss")}]");
                }
                else
                {
                    messages.Add($"[{groupName}] --- {recentHistoryMessage.backend_user_name}: {recentHistoryMessage.talk_content} --- [{recentHistoryMessage.created_date.ToString("HH:mm:ss")}]");
                }
            }
            InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }

    }
}
